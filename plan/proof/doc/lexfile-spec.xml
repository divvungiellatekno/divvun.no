<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="https://svn.apache.org/repos/asf/forrest/trunk/tools/xxe/css/document2x.css"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN"
"http://forrest.apache.org/dtd/document-v20.dtd">
<document>
   <header>
      <title>Hfst speller files</title>
      <subtitle>Specification for an hfst-based speller lexicon file format</subtitle>
      <version>0.2</version>
   </header>
   <body>
      <p>This document specifies the different parts of a speller lexicon file format to be used together with an
      hfst-based speller engine. It is based on discussions and feedback from June 2010 from potential stakeholders and
      interested parties.</p>
      <p>The specification is open, and the use of it is encouraged whereever hfst-based proofing tools are
      implemented.</p>
      <p>A specification of a hyphenation lexicon file format is deliberately left out at the moment, but will be added
      in the future, based on feedback and discussions of this specification.</p>
      <section>
         <title>Base file format - zip archive</title>
         <p>The base file format is a zip archive containing a number of single files that together comprises the full
         speller lexicon file package. There are several other, widely used file formats that use the same structure,
         e.g. OpenOffice and the newer MS Office xml file formats.</p>
         <p>This format has several benefits: the deliverable is one binary, it is easily extendable with more content
         without breaking backwards compatibility (at least with some planning ahead), and support for this format
         should be easy to find both as open-source and closed-source if one doesn't want to do it oneself.</p>
         <p>The ZIP file must not be encrypted and it must be compatible with ZIP format version 2.0 as defined by
         PKWare application note 6.2.0: <a
         href="http://www.pkware.com/support/application-note-archives">http://www.pkware.com/support/application-note-archives</a>.</p>
         <p>A possible open-source zip library that seems to adhere to these requirements is <a
         href="http://zziplib.sourceforge.net/">http://zziplib.sourceforge.net/</a>.</p>
         <p>To support usage of closed-source transducers, the zip file can <em>optionally</em> be encrypted (despite
         what is said above). But: support for encrypted zip files is <em>not required</em>, and all conforming
         implementations <em>must</em> support unencrypted zip files.</p>
         <section>
            <title>File naming convention</title>
            <p>The default file name for the zip file is:</p>
            <source>LOCALE-speller.zhfst</source>
            <p>where</p>
            <dl>
               <dt><code>LOCALE</code></dt>
               <dd>specifies the locale for which the speller lexicon is meant to be used for, following BCP 47; this
               would also include the use of private use subtags for specifying e.g. domains for specialised spellers,
               e.g <code>-x-legal</code>.</dd>
               <dt><code>-speller</code></dt>
               <dd>indicates that this is an archive for spelling purposes</dd>
               <dt><code>zhfst</code></dt>
               <dd>indicates a zipped collection of (mostly) hfst files</dd>
            </dl>
            <p>Examples:</p>
            <ul>
               <li><code>se-speller.zhfst</code> (North Sámi speller lexicon, all geographies)</li>
               <li><code>fi-x-legal-speller.zhfst</code> (Finnish legal terms speller lexicon, all geographies)</li>
               <li><code>fi-SE-speller.zhfst</code> (speller lexicon for Finnish as used in Sweden)</li>
            </ul>
         </section>
         <section>
            <title>Exceptions to file naming conventions</title>
            <p>There might be application-specific or even plattform-specific reasons to not follow the locale
            convention above, cases where the plattform or the host application prescribes a different naming
            conventions. The filenaming convention is only a recommendation, but care should be taken to make sure the
            filename is reasonably informative within the limits of external requirements, and in one way or another
            convey the information in the three parts above (ie locale, that it is a speller, and that the content is
            hfst-based and zipped).</p>
         </section>
         <section>
            <title>Overriding filename in case of conflicts</title>
            <p>When more than one speller zip file is found for a given language, all zip files could contain one
            default accepting transducer (see below). In this case the host application should provide a user interface
            for selecting the variant to use (using the description found in the xml file to present the variants to the
            user). But there might be cases where there is no such user interface. For these cases the following
            fall-back resolution is required: pick the file named</p>
            <source>LOCALE-default-speller.zhfst</source>
            <p> where LOCALE is restricted to specifying the language only. Example:</p>
            <source>fi-default-speller.zhfst</source>
            <p>would take precedence over other speller files for Finnish if more than one contain a default accepting
            transducer. The last-resort solution for the end user is then to rename the preferred speller zip file to
            this filename pattern.</p>
         </section>
      </section>
      <section>
         <title>Zip file content - file naming conventions of contained files</title>
         <p>The zip archive should contain files as follows (not all required, see below):</p>
         <source>index.xml
acceptor.default.hfst
acceptor.DESCR.hfst
errmodel.default.hfst
errmodel.ocr.hfst
errmodel.DESCR.hfst</source>
         <p>where</p>
         <dl>
            <dt><code>index.xml</code></dt>
            <dd>is a simple xml file (structure described below) giving details about the rest of the zip file content.
            REQUIRED.</dd>
            <dt><code>acceptor.DESCR.hfst</code></dt>
            <dd><p>is one or more acceptor transducers. A transducer can either be a one-level or a two-level
            transducer; if it is a two-level transducer, the other level must produce analyses of the correct words or
            the accepted suggestions produced by the error models, and the fact that it is a two-level transducer
            producing analyses must be expressed in the <code>index.xml</code> file's description of this file. It is an
            error to provide an analysing speller transducer without stating so in the <code>index.xml</code>
            file.</p><p>The filename <code>acceptor.default.hfst</code> is reserved for the default acceptor in case
            there are multiple acceptors (for implementations or situations where the acceptor to be used can not be
            determined at runtime).</p><p>Additional acceptor files can be analysing acceptors (if the default one is
            non-analysing), or they can be additional specialised terminology, or whatever seems appropriate in each use
            case. <strong>DESCR</strong> should be a short, preferably one-word description of the lexicon. If the
            archive is a distribution of a specialised terminology speller, this transducer may be the only transducer
            in the archive.</p><p>It would also be possible to indicate if an acceptor is analysing by using an
            <code>anl.</code> infix before the filename suffix, like <code>acceptor.default.anl.hfst</code>. This option
            is left open at the moment, and subject to feedback from implementors.</p><p>At least <em>one</em> acceptor
            is REQUIRED.</p></dd>
            <dt><code>errmodel.DESCR.hfst</code></dt>
            <dd>is zero or more error model transducers containing spelling error corrections ("error models") for the
            speller. The reserved filename <code>errmodel.default.hfst</code> is to be used as the fallback error model
            if an implementation is not able to otherwise choose which one to use. OPTIONAL.</dd>
         </dl>
         <p>The basic idea is that by just using the defaults and the file naming convention described above (ie
         conveying the intended locale), it would be possible to perform spell checking for the requested language
         without further work, e.g. without the XML machinery needed to process the <code>index.xml</code> file (but
         that file is still required for an archive to be in accordance with this specification).</p>
         <p>The absolute minimal content in a zhfst archive is thus:</p>
         <source>index.xml
acceptor.hfst -OR- acceptor.DESCR.hfst</source>
      </section>
      <section>
         <title>Structure of <code>index.xml</code></title>
         <p>The structure of the <code>index.xml</code> file can be exemplified by the following xml document for a
         North Sámi speller file <code>se.zhfst</code> (with a simple BCP 47 locale name of just 'se', the ISO 639-1
         code for the language):</p>
         <source>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;hfstspeller dtdversion="1.0" hfstversion="3"&gt;
    &lt;info&gt;
        &lt;locale&gt;se&lt;/locale&gt;
        &lt;title&gt;Davvisámegiela divvunxxx&lt;/title&gt;
        &lt;title xml:lang="nn"&gt;Nordsamisk stavekontroll&lt;/title&gt;
        &lt;title xml:lang="en"&gt;North Sámi speller&lt;/title&gt;
        &lt;description&gt;[North Sámi description here]&lt;/description&gt;
        &lt;description xml:lang="nn"&gt;Ein stavekontroll for nordsamisk
        laga av Divvun-prosjektet i samarbeid med Senter for samisk
        språkteknologi, Universitetet i Tromsø&lt;/description&gt;
        &lt;version vcsrev="33459"&gt;1.5.73&lt;/version&gt;
        &lt;date&gt;2010-09-23&lt;/date&gt;
        &lt;producer&gt;Divvun&lt;/producer&gt;
        &lt;contact email="divvun@samediggi.no" website="http://www.divvun.no/"/&gt;
    &lt;/info&gt;
    &lt;acceptor type="general" transtype="analyzing" id="acceptor.default.hfst"&gt;
        &lt;title&gt;[North Sámi name of acceptor]&lt;/title&gt;
        &lt;title xml:lang="nn"&gt;Standard stavekontrolleksikon for nordsamisk&lt;/title&gt;
        &lt;description&gt;[North Sámi description here]&lt;/description&gt;
        &lt;description xml:lang="nn"&gt;Eit stavekontrolleksikon som inneheld alle
        vanlege ord og namn. Leksikonet skal dekkja behovet for korrekturlesing
        for vanleg kontorbruk.&lt;/description&gt;
    &lt;/acceptor&gt;
    &lt;errmodel&gt;
        &lt;title&gt;[North Sámi name of error model]&lt;/title&gt;
        &lt;title xml:lang="nn"&gt;Standardkorrigering&lt;/title&gt;
        &lt;title xml:lang="en"&gt;Default corrections&lt;/title&gt;
        &lt;description xml:lang="nn"&gt;Ein korrigeringsmodell for tekst typisk
        skrive i tekstbehandlingssystem. Modellen er balansert mellom kravet
        til rask respons og relevante forslag.&lt;/description&gt;
        &lt;description xml:lang="en"&gt;A correction for text typically entered in
        a text editor. The model is balanced between fast response
        times and more relevant correction suggestions.&lt;/description&gt;
        &lt;type type="default"/&gt;
        &lt;model&gt;errormodel.default.hfst&lt;/model&gt;
    &lt;/errmodel&gt;
    &lt;errmodel&gt;
        &lt;title&gt;[North Sámi name of error model]&lt;/title&gt;
        &lt;title xml:lang="nn"&gt;OCR-korrigering&lt;/title&gt;
        &lt;description&gt;[North Sámi description here]&lt;/description&gt;
        &lt;description xml:lang="nn"&gt;Ein korrigeringsmodell tilpassa OCR-lesne
        tekstar og typiske OCR-feil. Kan òg brukast på handskriven
        tekst.&lt;/description&gt;
        &lt;type type="ocr"/&gt;
        &lt;type type="handwriting"/&gt;
        &lt;model&gt;errormodel.ocr.hfst&lt;/model&gt;
        &lt;model&gt;errormodel2.hfst&lt;/model&gt;
    &lt;/errmodel&gt;
&lt;/hfstspeller&gt;</source>
         <p>This corresponds to the following DTD:</p>
         <source>&lt;!ELEMENT hfstspeller (info, acceptor+, errmodel*)&gt;
&lt;!ATTLIST hfstspeller 
  dtdversion  CDATA #REQUIRED
  hfstversion CDATA #REQUIRED
  &gt;

&lt;!ELEMENT info (locale, title+, description+, version, date, producer, contact)&gt;

&lt;!ELEMENT locale (#PCDATA)&gt;

&lt;!ELEMENT title (#PCDATA)&gt;
&lt;!ATTLIST title 
  xml:lang NMTOKEN #IMPLIED&gt;
  &gt;

&lt;!ELEMENT description (#PCDATA)&gt;
&lt;!ATTLIST description 
  xml:lang NMTOKEN #IMPLIED&gt;
  &gt;

&lt;!ELEMENT version (#PCDATA)&gt;
&lt;!ATTLIST version 
  vcsrev  CDATA #IMPLIED
  &gt;

&lt;!ELEMENT date (#PCDATA)&gt;
&lt;!ELEMENT producer (#PCDATA)&gt;

&lt;!ELEMENT contact EMPTY&gt;
&lt;!ATTLIST contact 
  email   CDATA #REQUIRED
  website CDATA #REQUIRED
  &gt;

&lt;!ELEMENT acceptor (title+, description+)&gt;
&lt;!ATTLIST acceptor 
  type   ( general | medical | legal | other )   "general"
  trtype (single|analyzing)   "single"
  id     CDATA #REQUIRED
  &gt;

&lt;!ELEMENT errmodel (title+, description+, type+, model+)&gt;
&lt;!ELEMENT type EMPTY&gt;
&lt;!ATTLIST type 
  type   ( default | dyslectic | fast | ocr | handwriting ) "default"
  &gt;
&lt;!ELEMENT model (#PCDATA)&gt;</source>
         <p>Most of the elements in this dtd should be straightforward, but a few points should be mentioned:</p>
         <dl>
            <dt>@dtdversion of hfstspeller</dt>
            <dd>this is the version of the dtd=specification, can be used for compatibility testing during
            initialisation</dd>
            <dt>@hfstversion of hfstspeller</dt>
            <dd>this is the version of the hfst header in the transducer files, can be used for compatibility testing
            during initialisation. The only version accepted at the moment is version 3, the latest major version of the
            HFST tools.</dd>
            <dt>locale</dt>
            <dd>the locale of the transducer(s) in the archive, following BCP47. If there is any conflict between locale
            in the filename of the archive and the value of this element, the value in this element takes
            precedence.</dd>
            <dt>title, description</dt>
            <dd>at least one is required, which corresponds to the locale of the speller lexicon; no xml:lang attribute
            is required for this one; an unlimited number of additional elements can be added, each with its own unique
            and required xml:lang attribute. These elements are intended to be presented to the end users if supported
            by the host application, f.ex. in a user interface to present the speller, or in an interface element where
            correction models can be chosen.</dd>
            <dt>vcsrev</dt>
            <dd>the revision number in the producer's version control system</dd>
            <dt>@id of acceptor</dt>
            <dd>is the name of the transducer file in the zip archive</dd>
            <dt>@type of acceptor</dt>
            <dd>specifies one of a limited number of possible lexicon types. <code>general</code> is the default value,
            <code>other</code> should be used for specialised lexicons not covered by other categories in the DTD.</dd>
            <dt>@trtype of acceptor</dt>
            <dd>transducer type, either <code>single</code> for one-level transducers (default), or
            <code>analyzing</code> for analysing, two-level transducers.</dd>
            <dt>errmodel</dt>
            <dd>optional; each specified corresponds to a transducer with the filename given in the <code>model</code>
            element.</dd>
         </dl>
      </section>
      <section>
         <title>Acceptance transducers</title>
         <p>The default acceptance transducer is a weighted, one-level automaton. All complying implementations must
         support this.</p>
         <p>It is also possible to use a two-level, weighted analysing transducer. The analysis output could be used to
         support concext-based filtering of suggestions (ie only present suggestions with a POS that fits in the given
         context). Other usage scenarios are also possible.</p>
         <p>Support for analysing transducers is optional. When the use of such a transducer is specified in the
         index.xml file, an implementation that does not support it may choose to flag an error or silently ignore the
         speller zip archive.</p>
         <p>There can be more than one accepting transducer in the archive. Usually there should be one general-language
         transducer, and possibly one or more specialised transducers, but if an archive is meant to just complement an
         existing installation, only specialised transducers could be included.</p>
         <p>The acceptor transducers must include a HFST 3 metadata header.</p>
      </section>
      <section>
         <title>Error model transducers</title>
         <p>There can be zero or more error models in the zhfst archive. There is one reserved error model filename:
         <code>errmodel.default.hfst</code> (see further below). The behaviour when there are multiple error models
         included is at present undefined, and subject to feedback from implementors. Possible options are at least:</p>
         <ul>
            <li>only apply one at a time, at the user's choice through a user configuration interface</li>
            <li>apply a subset of the error models, at the user's choice; all selected error models are applied
            together, as if they were joined (in the fst sense of the word)</li>
            <li>apply all the requested error models together, as if they were joined</li>
         </ul>
         <p>Supporting multiple error models is optional. An implementation that does not support more than one error
         model must use the default error model named <code>errmodel.default.hfst</code>, and silently ignore the other
         error models when opening a speller archive containing multiple error models.</p>
         <p>The error model transducers must include a HFST 3 metadata header.</p>
      </section>
   </body>
</document>
